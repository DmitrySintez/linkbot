# bot.py
import logging
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import BOT_TOKEN, CHANNEL_ID
from handlers import register_all_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

async def send_channel_notification(username, link):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –æ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–µ"""
    try:
        await bot.send_message(
            CHANNEL_ID,
            f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏–ª —Å—Å—ã–ª–∫—É!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {link}"
        )
        logger.info(f"Notification sent to channel about user {username}")
    except Exception as e:
        logger.error(f"Failed to send channel notification: {e}")

# –î–æ–±–∞–≤—å—Ç–µ middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç process_link
from aiogram.dispatcher.middlewares import BaseMiddleware

class NotificationMiddleware(BaseMiddleware):
    async def on_post_process_message(self, message, results, data):
        for result in results:
            if isinstance(result, dict) and 'username' in result and 'link' in result:
                await send_channel_notification(result['username'], result['link'])

async def on_startup(dispatcher):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_all_handlers(dispatcher)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware
    dispatcher.middleware.setup(NotificationMiddleware())

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)