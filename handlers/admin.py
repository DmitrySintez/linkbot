from aiogram import Router, F, Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from config import get_welcome_message, update_welcome_message

from database import db
from models import AddUserStates, EditUserStates, DeleteUserStates, BroadcastStates, WelcomeMessageStates
from utils.keyboards import (
    get_admin_keyboard, 
    get_user_action_keyboard, 
    get_cancel_keyboard,
    get_admin_inline_keyboard,
    get_main_keyboard,
    get_start_keyboard
)
from utils.helpers import (
    check_admin,
    cancel_state,
    format_user_list,
    send_error_message,
    send_success_message
)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import asyncio
import logging

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
router = Router()

async def check_admin_and_get_users(message: Message) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await check_admin(message):
        return None
        
    users = db.get_all_users()
    if not users:
        await send_error_message(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return None
    return users

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    users = await check_admin_and_get_users(message)
    if not users:
        return
    
    report = format_user_list(users)
    if users:
        report += "\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /adduser"
    
    await message.answer(report)
    await message.answer(
        "–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_admin_keyboard()
    )

@router.message(F.text == "üè™ –î–æ–±–∞–≤–∏—Ç—å")
@router.message(Command("adduser"))
async def cmd_add_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adduser"""
    if not await check_admin(message):
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(AddUserStates.waiting_for_username)

@router.message(AddUserStates.waiting_for_username)
async def process_new_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await cancel_state(message, state):
        return
    
    username = message.text.strip()
    if db.get_user_by_username(username):
        await send_error_message(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω.")
        return
    
    await state.update_data(username=username)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=get_cancel_keyboard())
    await state.set_state(AddUserStates.waiting_for_password)

@router.message(AddUserStates.waiting_for_password)
async def process_new_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await cancel_state(message, state):
        return
        
    password = message.text.strip()
    user_data = await state.get_data()
    username = user_data.get('username')
    
    if db.add_user(username, password):
        await send_success_message(
            message,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–õ–æ–≥–∏–Ω: {username}\n–ü–∞—Ä–æ–ª—å: {password}"
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    else:
        await send_error_message(
            message, 
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏–Ω '{username}' —É–∂–µ –∑–∞–Ω—è—Ç.",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
@router.message(Command("edit_welcome"))
async def cmd_edit_welcome(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not await check_admin(message):
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{get_welcome_message()}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É:\n"
        f"‚Ä¢ –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞: <a href='https://example.com'>—Ç–µ–∫—Å—Ç</a>\n"
        f"‚Ä¢ –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: <b>—Ç–µ–∫—Å—Ç</b>\n"
        f"‚Ä¢ –ö—É—Ä—Å–∏–≤: <i>—Ç–µ–∫—Å—Ç</i>\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞:",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(WelcomeMessageStates.waiting_for_message)

@router.message(WelcomeMessageStates.waiting_for_message)
async def process_welcome_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if await cancel_state(message, state):
        return
    
    new_welcome_message = message.text.strip()
    if not new_welcome_message:
        await send_error_message(message, "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å HTML
        test_msg = await message.answer(
            new_welcome_message,
            parse_mode="HTML"
        )
        await test_msg.delete()
        
        # –ï—Å–ª–∏ HTML –≤–∞–ª–∏–¥–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update_welcome_message(new_welcome_message):
            await send_success_message(message, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await send_error_message(
                message,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                reply_markup=get_admin_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Failed to validate HTML in welcome message: {e}")
        await send_error_message(
            message,
            "–û—à–∏–±–∫–∞ –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤.",
            reply_markup=get_admin_keyboard()
        )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    await state.clear()

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not await check_admin(message):
        return
    
    kb = [
        [KeyboardButton(text='üìù –¢–µ–∫—Å—Ç'), KeyboardButton(text='üñº –§–æ—Ç–æ')],
        [KeyboardButton(text='üé• –í–∏–¥–µ–æ'), KeyboardButton(text='üéµ –ê—É–¥–∏–æ')],
        [KeyboardButton(text='üìé –î–æ–∫—É–º–µ–Ω—Ç')],
        [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=keyboard
    )
    await state.set_state(BroadcastStates.select_type)

@router.message(BroadcastStates.select_type)
async def process_broadcast_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if await cancel_state(message, state):
        return
    
    content_type = message.text.strip()
    await state.update_data(content_type=content_type)
    
    if content_type == "üìù –¢–µ–∫—Å—Ç":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(BroadcastStates.waiting_for_message)
    elif content_type in ["üñº –§–æ—Ç–æ", "üé• –í–∏–¥–µ–æ", "üéµ –ê—É–¥–∏–æ", "üìé –î–æ–∫—É–º–µ–Ω—Ç"]:
        content_type_mapping = {
            "üñº –§–æ—Ç–æ": "—Ñ–æ—Ç–æ",
            "üé• –í–∏–¥–µ–æ": "–≤–∏–¥–µ–æ",
            "üéµ –ê—É–¥–∏–æ": "–∞—É–¥–∏–æ",
            "üìé –î–æ–∫—É–º–µ–Ω—Ç": "–¥–æ–∫—É–º–µ–Ω—Ç",
        }
        
        await message.answer(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {content_type_mapping[content_type]} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(BroadcastStates.waiting_for_media)
    else:
        keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer(
            "–í—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=keyboard
        )

@router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if await cancel_state(message, state):
        return
    
    broadcast_text = message.text.strip()
    if not broadcast_text:
        await send_error_message(message, "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    users = db.get_all_users()
    sent_count = 0
    failed_count = 0
    
    progress_msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    for user_id, username, telegram_id, _ in users:
        if telegram_id and telegram_id != message.from_user.id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            try:
                formatted_message = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{broadcast_text}"
                await bot.send_message(
                    telegram_id,
                    formatted_message,
                    parse_mode="HTML"
                )
                sent_count += 1
                
                if sent_count % 10 == 0:
                    await progress_msg.edit_text(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                
                await asyncio.sleep(0.1)
                
            except Exception as e:
                failed_count += 1
                logger.error(f"Failed to send message to user {username} (ID: {user_id}): {e}")
    
    result_message = f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n- –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}"
    await send_success_message(message, result_message)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    await state.clear()

@router.message(BroadcastStates.waiting_for_media, F.photo | F.video | F.audio | F.document)
async def process_broadcast_media(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if await cancel_state(message, state):
        return
    
    user_data = await state.get_data()
    content_type = user_data.get('content_type')
    
    file_id = None
    media_type = None
    
    if message.photo and content_type == "üñº –§–æ—Ç–æ":
        file_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.video and content_type == "üé• –í–∏–¥–µ–æ":
        file_id = message.video.file_id
        media_type = "video"
    elif message.audio and content_type == "üéµ –ê—É–¥–∏–æ":
        file_id = message.audio.file_id
        media_type = "audio"
    elif message.document and content_type == "üìé –î–æ–∫—É–º–µ–Ω—Ç":
        file_id = message.document.file_id
        media_type = "document"
    else:
        await message.answer(
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({content_type}). "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(file_id=file_id, media_type=media_type)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫ —ç—Ç–æ–º—É –º–µ–¥–∏–∞—Ñ–∞–π–ª—É? –ï—Å–ª–∏ –¥–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. "
        "–ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'.",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BroadcastStates.waiting_for_caption)

@router.message(BroadcastStates.waiting_for_caption)
async def process_broadcast_caption(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É –∏ –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if await cancel_state(message, state):
        return
    
    caption = message.text.strip()
    if caption.lower() == "–±–µ–∑ —Ç–µ–∫—Å—Ç–∞":
        caption = ""
    
    user_data = await state.get_data()
    file_id = user_data.get('file_id')
    media_type = user_data.get('media_type')
    
    users = db.get_all_users()
    sent_count = 0
    failed_count = 0
    
    progress_msg = await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...")
    
    if caption:
        formatted_caption = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó:</b>\n\n{caption}"
    else:
        formatted_caption = "<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç PARTNERS üîó</b>"
    
    for user_id, username, telegram_id, _ in users:
        if telegram_id and telegram_id != message.from_user.id:
            try:
                if media_type == "photo":
                    await bot.send_photo(
                        telegram_id, 
                        photo=file_id, 
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                elif media_type == "video":
                    await bot.send_video(
                        telegram_id, 
                        video=file_id, 
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                elif media_type == "audio":
                    await bot.send_audio(
                        telegram_id, 
                        audio=file_id, 
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                elif media_type == "document":
                    await bot.send_document(
                        telegram_id, 
                        document=file_id, 
                        caption=formatted_caption,
                        parse_mode="HTML"
                    )
                
                sent_count += 1
                
                if sent_count % 10 == 0:
                    await progress_msg.edit_text(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...")
                
                await asyncio.sleep(0.1)
                
            except Exception as e:
                failed_count += 1
                logger.error(f"Failed to send media to user {username} (ID: {user_id}): {e}")
    
    result_message = f"–†–∞—Å—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n- –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}"
    await send_success_message(message, result_message)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
    await state.clear()

def setup(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    dp.include_router(router)
