from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from io import BytesIO

from database import db
from models import AuthStates
from config import ADMIN_IDS
from utils.keyboards import get_start_keyboard, get_main_keyboard, get_admin_keyboard
from utils.captcha import generate_captcha_text, generate_captcha_image
from utils.helpers import send_error_message, send_success_message

async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
    captcha_text = generate_captcha_text()
    captcha_image = generate_captcha_image(captcha_text)
    
    await state.update_data(captcha_text=captcha_text)
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤–≤–µ–¥—è —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    await message.answer_photo(
        types.InputFile(BytesIO(captcha_image), filename="captcha.png")
    )
    await AuthStates.waiting_for_captcha.set()

async def cmd_login(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:", reply_markup=types.ReplyKeyboardRemove())
    await AuthStates.waiting_for_username.set()

async def process_captcha(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ –∏ –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞"""
    user_input = message.text.strip().upper()
    user_data = await state.get_data()
    captcha_text = user_data.get('captcha_text')
    
    if user_input != captcha_text:
        await send_error_message(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
        await state.finish()
        return
    
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:", reply_markup=types.ReplyKeyboardRemove())
    await AuthStates.waiting_for_username.set()

async def process_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = message.text.strip()
    await state.update_data(username=username)
    
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=types.ReplyKeyboardRemove())
    await AuthStates.waiting_for_password.set()

async def process_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    password = message.text.strip()
    user_data = await state.get_data()
    username = user_data.get('username')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    user_id = db.authenticate_user(username, password)
    
    if not user_id:
        await send_error_message(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /login")
        await state.finish()
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_telegram_id(user_id, message.from_user.id)
    
    keyboard = get_admin_keyboard() if message.from_user.id in ADMIN_IDS else get_main_keyboard()
    
    await message.answer(
        "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É: /setlink\n"
        "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É: /mylink\n"
        "- –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞: /logout",
        reply_markup=keyboard
    )
    await state.finish()

async def cmd_logout(message: types.Message):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user = db.get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        await send_error_message(message, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=get_start_keyboard())
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É
    db.update_telegram_id(user[0], None)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=get_start_keyboard())

def register_auth_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    # –ö–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(cmd_start, Command("start"))
    dp.register_message_handler(cmd_login, Command("login"))
    dp.register_message_handler(cmd_login, text="üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
    dp.register_message_handler(cmd_logout, Command("logout"))
    dp.register_message_handler(cmd_logout, text="üö™ –í—ã–π—Ç–∏")
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    dp.register_message_handler(process_captcha, state=AuthStates.waiting_for_captcha)
    dp.register_message_handler(process_username, state=AuthStates.waiting_for_username)
    dp.register_message_handler(process_password, state=AuthStates.waiting_for_password)
