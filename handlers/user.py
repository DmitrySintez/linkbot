import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from database import db
from models import LinkStates
from config import ADMIN_IDS
from utils.keyboards import get_main_keyboard, get_admin_keyboard, get_start_keyboard, get_cancel_keyboard
from utils.helpers import send_error_message, send_success_message, cancel_state

async def check_auth(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.get_user_by_telegram_id(message.from_user.id)
    if not user:
        await send_error_message(message, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login", reply_markup=get_start_keyboard())
        return False
    return True

async def cmd_set_link(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setlink"""
    if not await check_auth(message):
        return
    
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç.\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, –¥–æ–º–µ–Ω –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.",
        reply_markup=get_cancel_keyboard()
    )
    await LinkStates.waiting_for_link.set()

async def process_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏"""
    if await cancel_state(message, state):
        return
        
    link = message.text.strip()
    user = db.get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        await send_error_message(message, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        await state.finish()
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_link(user[0], link)
    
    # –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_admin_keyboard() if message.from_user.id in ADMIN_IDS else get_main_keyboard()
    await send_success_message(message, f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {link}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.finish()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
    return {
        "username": user[1],
        "link": link
    }

async def cmd_my_link(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mylink"""
    if not await check_auth(message):
        return
    
    user = db.get_user_by_telegram_id(message.from_user.id)
    link = user[2]
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = get_admin_keyboard() if message.from_user.id in ADMIN_IDS else get_main_keyboard()

    if link:
        await message.answer(f"üîó –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {link}")
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setlink —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É.")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def register_user_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–æ–π
    dp.register_message_handler(cmd_set_link, Command("setlink"))
    dp.register_message_handler(cmd_set_link, text="üîÑ –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")
    dp.register_message_handler(cmd_my_link, Command("mylink"))
    dp.register_message_handler(cmd_my_link, text="üîó –ú–æ—è —Å—Å—ã–ª–∫–∞")
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Å—ã–ª–∫–∏
    dp.register_message_handler(process_link, state=LinkStates.waiting_for_link)
